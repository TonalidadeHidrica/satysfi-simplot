% load standard list package
@require: base/list-ext
@require: pervasives

@require: figbox/figbox

@import: style

% データ点が与えられたときに、実際にグラフ上で対応する点の座標を返す写像。
type pointmap = float * float -> point

module Graph : sig

  type graph

  val line : (float * float) list -> LineGraphStyle.style list -> graph

  val get-range : graph -> (| x: float * float; y: float * float|)
  val draw-graph : pointmap -> graph -> graphics list

end = struct

  type graph = (|
    range: (| x: float * float; y: float * float|);
    grf: pointmap -> graphics list;
  |)

  let line data lgstyles =

    let range = data |> List.fold-left
      (fun record datum ->(
        let (x, y) = datum in
        let (xmin, xmax) = record#x in
        let (ymin, ymax) = record#y in
        let xmin = if Float.(x < xmin) then x else xmin in
        let xmax = if Float.(x > xmax) then x else xmax in
        let ymin = if Float.(y < ymin) then y else ymin in
        let ymax = if Float.(y > ymax) then y else ymax in
        (| x = (xmin, xmax); y = (ymin, ymax) |)
      ))
      (| x = (0., 0.); y = (0., 0.)|)
    in

    let grf pointmap =
      let points = data |> List.map pointmap in
      lgstyles |> List.map (fun lgstyle -> LineGraphStyle.make-graphics lgstyle points)
               |> List.concat
    in
    (|
      range = range;
      grf = grf;
    |)

  let get-range grph = grph#range
  let draw-graph ptmap grph = grph#grf ptmap

end

module Axis : sig

  type axis

  type tick-style
  val tick-style-default: tick-style
  val set-tick: bool -> tick-style -> tick-style
  val set-offset: length -> tick-style -> tick-style

  type label-style
  val label: inline-text -> label-style
  val set-label-next-to-head: label-style -> label-style
  val set-label-centered: length ?-> label-style -> label-style
  val set-label-rotation-degree: float -> label-style -> label-style
  val unset-label-rotation: label-style -> label-style

  type axis-style
  val axis-style-default: axis-style
  val set-tick-styles: tick-style list -> axis-style -> axis-style
  val set-arrow: arrow-head-size -> axis-style -> axis-style
  val set-arrow-default: axis-style -> axis-style
  val unset-arrow: axis-style -> axis-style
  val set-label: label-style -> axis-style -> axis-style
  val unset-label: axis-style -> axis-style
  val set-axis-position-min: axis-style -> axis-style
  val set-axis-position-max: axis-style -> axis-style
  val set-axis-position: float -> axis-style -> axis-style

  % val new-x: axis
  % val new-y: axis
  val new-custom-x: (context -> context)?-> axis-style ?-> float list -> inline-text list -> axis
  val new-custom-y: (context -> context)?-> axis-style ?-> float list -> inline-text list -> axis
  
  val draw-axis : (| x: float * float; y: float * float|) -> pointmap -> context -> axis -> graphics list
end = struct

  type tick-style = (|
    tick: bool;
    offset: length;
  |)
  let tick-style-default = (|
    tick = true;
    offset = 6pt;
  |)
  let set-tick x a = (| a with tick = x |)
  let set-offset x a = (| a with offset = x |)

  type label-position =
    | NextToHead
    | Centered of length % offset
  type label-style = (|
    text: inline-text;
    position: label-position;
    rotation: float option;
  |)
  let label it = (|
    text = it;
    position = NextToHead;
    rotation = None;
  |)
  let set-label-next-to-head a = (| a with position = NextToHead |)
  let set-label-centered ?:offset a =
    let offset = offset |> Option.unwrap-or 8pt in
      (| a with position = Centered offset |)
  let set-label-rotation-degree deg a = (| a with rotation = Some(deg) |)
  let unset-label-rotation a = (| a with rotation = None |)

  type axis-position =
    | Leftmost
    | Rightmost
    | CustomPosition of float

  type axis-style = (|
    tick-styles: tick-style list;
    arrow: arrow-head-size option;
    label: label-style option;
    position: axis-position;
  |)
  let axis-style-default = (|
    tick-styles = [];
    arrow = None;
    label = None;
    position = Leftmost;
  |)
  let set-tick-styles x a = (| a with tick-styles = x |)
  let set-arrow opt a = (| a with arrow = Some(opt) |)
  let set-arrow-default a = (| a with arrow = Some(Arrow.default-arrow-head-size) |)
  let unset-arrow a = (| a with arrow = None |)
  let set-label x a = (| a with label = Some(x) |)
  let unset-label a = (| a with label = None |)
  let set-axis-position-min a = (| a with position = Leftmost |)
  let set-axis-position-max a = (| a with position = Rightmost |)
  let set-axis-position x a = (| a with position = CustomPosition(x) |)

  type axis = (| x: float * float; y: float * float|) -> pointmap -> context -> graphics list

  let-rec zip-tick-styles styles xs = match xs with
    | [] -> []
    | x::xs -> (match styles with
        | [] -> (tick-style-default, x) :: zip-tick-styles [] xs
        | s::styles -> (s, x) :: zip-tick-styles styles xs
      )

  let find-position min max value = match value with
    | Leftmost -> min
    | Rightmost -> max
    | CustomPosition(x) -> x

  let draw-text-centered ctx it =
    let gr = read-inline ctx it |> draw-text (0pt, 0pt) in
    let ((xmin, ymin), (xmax, ymax)) = get-graphics-bbox gr in
    let gr = shift-graphics ((xmin +' xmax) *' Float.neg 0.5, (ymin +' ymax) *' Float.neg 0.5) gr in
      (gr, (xmax -' xmin, ymax -' ymin))

  let new-custom-x ?:ctxf ?:axis-style vals its range ptmap ctx =
    let ctx = Option.map-or ctx (fun ctxf -> ctxf ctx) ctxf in
    let axis-style = Option.unwrap-or axis-style-default axis-style in

    let (xmin, xmax) = range#x in
    let (ymin, ymax) = range#y in
    let axis-y = find-position ymin ymax axis-style#position in
    let pt1 = (ptmap (xmin, axis-y)) in
    let pt2 = (ptmap (xmax, axis-y)) in
    let line = match axis-style#arrow with
      | Some opts -> Gr.arrow 1pt Color.black opts#lenL opts#lenM opts#lenP pt1 pt2
      | None -> [stroke 1pt Color.black (Gr.line pt1 pt2)]
    in

    let ticks =
      let tickf (style, xval) =
        if style#tick then
          let (x, y) = ptmap (xval, ymin) in
          [stroke 0.5pt Color.black
            (Gr.line (x, y) (x, y -' 5pt))]
        else []
      in
      zip-tick-styles axis-style#tick-styles vals
        |> List.map tickf
        |> List.concat
    in

    let ticklabels =
      let ticklabelf (style, (xval, it)) =
        let (x, y) = ptmap (xval, ymin) in
        let ib = read-inline ctx it in
        let (wid, ht, dp) = get-natural-metrics ib in
        draw-text (x -' wid *' 0.5, y -' style#offset -' ht) ib
      in
       List.zip vals its
         |> zip-tick-styles axis-style#tick-styles
         |> List.map ticklabelf
    in

    let axis-label = Option.map-or [] (fun label -> (
      let (gr, (w, h)) = draw-text-centered ctx label#text in
      match label#position with
        | NextToHead -> 
            let (x, y) = pt2 in
            let gr = gr |> shift-graphics (x +' w *' 0.5 +' 4pt, y -' h *' 0.5) in
              [gr]
        | Centered offset ->
            let (y, coef) = match axis-style#position with
              | Rightmost -> 
                  let bbox-ymax g = let ((_, _), (_, y)) = get-graphics-bbox g in y in
                  let (_, ymax) = ptmap (0., ymax) in
                  let y =
                    ticklabels
                      |> List.map bbox-ymax
                      |> List.fold-left Length.max ymax
                  in
                    (y, 1.)
              | _ -> 
                  let bbox-ymin g = let ((_, y), (_, _)) = get-graphics-bbox g in y in
                  let (_, ymin) = ptmap (0., ymin) in
                  let y =
                    ticklabels
                      |> List.map bbox-ymin
                      |> List.fold-left Length.min ymin
                  in
                    (y, Float.neg 1.)
            in
            let (x, _) = ptmap ((xmin +. xmax) /. 2., 0.) in
            let rotation = label#rotation |> Option.unwrap-or 0.0 in
            let gr =
              gr |> Gr.rotate-graphics (0pt, 0pt) rotation
                |> shift-graphics (x, y +' (h *' 0.5 +' offset) *' coef)
            in
              [gr]
    )) axis-style#label in

    [ticks; ticklabels; line; axis-label] |> List.concat

  let new-custom-y ?:ctxf ?:axis-style vals its  range ptmap ctx =
    let ctxf = ctxf |> Option.from (fun x -> x) in
    let axis-style = Option.unwrap-or axis-style-default axis-style in

    let (xmin, xmax) = range#x in
    let (ymin, ymax) = range#y in
    let axis-x = find-position xmin xmax axis-style#position in
    let pt1 = (ptmap (axis-x, ymin)) in
    let pt2 = (ptmap (axis-x, ymax)) in
    let line = match axis-style#arrow with
      | Some opts -> Gr.arrow 1pt Color.black opts#lenL opts#lenM opts#lenP pt1 pt2
      | None -> [stroke 1pt Color.black (Gr.line pt1 pt2)]
    in

    let ticks =
      let tickf (style, xval) =
        if style#tick then
          let (x, y) = ptmap (xval, ymin) in
          [stroke 0.5pt Color.black
            (Gr.line (x, y) (x -' 5pt, y))]
        else []
      in
      zip-tick-styles axis-style#tick-styles vals
        |> List.map tickf
        |> List.concat
    in

    let ticklabels =
      let ticklabelf (style, (yval, it)) =
        let (x, y) = ptmap (xmin, yval) in
        let ib = read-inline (ctxf ctx) it in
        let (wid, ht, dp) = get-natural-metrics ib in
        draw-text (x -' style#offset -' wid, y -' (ht -' dp) *' 0.5 ) ib
      in
      List.zip vals its
        |> zip-tick-styles axis-style#tick-styles
        |> List.map ticklabelf
    in

    let axis-label = Option.map-or [] (fun label -> (
      let (gr, (w, h)) = draw-text-centered ctx label#text in
      match label#position with
        | NextToHead -> 
            let (x, y) = pt2 in
            let gr = gr |> shift-graphics (x, y +' h *' 0.5 +' 4pt) in
              [gr]
        | Centered offset ->
            let (x, coef) = match axis-style#position with
              | Rightmost -> 
                  let bbox-xmax g = let ((_, _), (x, _)) = get-graphics-bbox g in x in
                  let (xmax, _) = ptmap (xmax, 0.) in
                  let x =
                    ticklabels
                      |> List.map bbox-xmax
                      |> List.fold-left Length.max xmax
                  in
                    (x, 1.)
              | _ -> 
                  let bbox-xmin g = let ((x, _), (_, _)) = get-graphics-bbox g in x in
                  let (xmin, _) = ptmap (xmin, 0.) in
                  let x =
                    ticklabels
                      |> List.map bbox-xmin
                      |> List.fold-left Length.min xmin
                  in
                    (x, Float.neg 1.)
            in
            let (_, y) = ptmap (0., (ymin +. ymax) /. 2.) in
            let rotation = match (label#rotation, axis-style#position) with
              | (Some(r), _) -> r
              | (None, Rightmost) -> Float.neg 90.0
              | (None, _) -> 90.0
            in
            let gr =
              gr |> Gr.rotate-graphics (0pt, 0pt) rotation
                |> shift-graphics (x +' (h *' 0.5 +' offset) *' coef, y)
            in
              [gr]
    )) axis-style#label in

    [ticks; ticklabels; line; axis-label] |> List.concat

  let draw-axis range ptmap ctx axis = axis range ptmap ctx

end

module Grid : sig
  type grid

  val x: LineGraphStyle.style ?-> float list -> grid
  val x-sub: LineGraphStyle.style ?-> float list -> grid
  val y: LineGraphStyle.style ?-> float list -> grid
  val y-sub: LineGraphStyle.style ?-> float list -> grid

  val draw-grid: (| x: float * float; y: float * float|) -> pointmap -> grid -> graphics list
end = struct
  type orientation = Vert | Horz
  type grid = (|
    style: LineGraphStyle.style;
    orient: orientation;
    points: float list;
  |)

  let make-grid style orient points = 
    (| style = style; orient = orient; points = points |)

  let default-grid-style =
    LineGraphStyle.solid ?:(| width = 0.5pt |) (Gray(0.4))
  let default-sub-grid-style =
    LineGraphStyle.solid ?:(| width = 0.5pt |) (Gray(0.7))

  let x ?:style points =
    let style = style |> Option.unwrap-or default-grid-style in
    make-grid style Vert points
  let y ?:style points =
    let style = style |> Option.unwrap-or default-grid-style in
    make-grid style Horz points
  let x-sub ?:style points =
    let style = style |> Option.unwrap-or default-sub-grid-style in
    make-grid style Vert points
  let y-sub ?:style points =
    let style = style |> Option.unwrap-or default-sub-grid-style in
    make-grid style Horz points

  let draw-grid range ptmap grid =
    let pts = match grid#orient with
      | Vert ->
          let (ymin, ymax) = range#y in
          grid#points
            |> List.map (fun x -> (ptmap (x, ymin), ptmap (x, ymax)))
      | Horz ->
          let (xmin, xmax) = range#x in
            grid#points
              |> List.map (fun y -> (ptmap (xmin, y), ptmap (xmax, y)))
    in
      pts
        |> List.map (fun (p, q) -> LineGraphStyle.make-graphics grid#style [p; q])
        |> List.concat
end

module Chart : sig

  type chart

  val new : length -> length -> chart

  val add-plot : Graph.graph -> chart -> chart
  val add-plots : Graph.graph list -> chart -> chart

  val add-axis : Axis.axis -> chart -> chart

  val add-grid: Grid.grid -> chart -> chart

  val set-xlim : float -> float -> chart -> chart
  val set-ylim : float -> float -> chart -> chart

  val draw : chart -> FigBox.figbox

end = struct

  type canvas = (|
    xlim: (float * float) option;
    ylim: (float * float) option;
    height: length;
    width: length;
  |)

  type chart = (|
    canvas: canvas;
    graphs: Graph.graph list;
    axes: Axis.axis list;
    grids: Grid.grid list;
  |)

  let new ht wid =
    (|
      canvas = (|
        xlim = None;
        ylim = None;
        height = ht;
        width = wid;
      |);
       graphs = [];
       axes = [];
       grids = [];
    |)

  let add-plots grphs cht =
    let graphs = List.append cht#graphs grphs in
    (| cht with graphs = graphs |)

  let add-plot grph = add-plots [grph]

  let set-xlim xmin xmax cht =
    (|cht with canvas = (|cht#canvas with xlim = Some((xmin, xmax))|)|)
  let set-ylim ymin ymax cht =
    (|cht with canvas = (|cht#canvas with ylim = Some((ymin, ymax))|)|)

  let add-axis axis cht =
    let axes = List.append cht#axes [axis] in
    (|cht with axes = axes|)

  let add-grid grid cht = (| cht with grids = grid :: cht#grids |)

  let draw cht =

    let (xmin, xmax) = cht#canvas#xlim |> Option.from (
      cht#graphs
        |> List.map Graph.get-range
        |> List.map (fun r -> r#x)
        |> List.fold-left (fun (xminall, xmaxall) (xmin, xmax) ->
        (
          if Float.(xminall > xmin) then xmin else xminall,
          if Float.(xmaxall < xmax) then xmax else xmaxall
        )
        ) (0., 0.)
    )
    in
    let (ymin, ymax) = cht#canvas#ylim |> Option.from (
      cht#graphs
        |> List.map Graph.get-range
        |> List.map (fun r -> r#y)
        |> List.fold-left (fun (yminall, ymaxall) (ymin, ymax) ->
        (
          if Float.(yminall > ymin) then ymin else yminall,
          if Float.(ymaxall < ymax) then ymax else ymaxall
        )
        ) (0., 0.)
    )
    in

    let range = (| x = (xmin, xmax); y = (ymin, ymax) |) in

    let ptmap (x, y) =
      let xlen = cht#canvas#width *' ( (x -. xmin) /. (xmax -. xmin) ) in
      let ylen = cht#canvas#height *' ( (y -. ymin) /. (ymax -. ymin) ) in
      (xlen, ylen)
    in

    let ibf ctx =
      let gr-grids = cht#grids |> List.map (Grid.draw-grid range ptmap) |> List.concat in
      let gr-graph = cht#graphs |> List.map (Graph.draw-graph ptmap) |> List.concat in
      let gr-axis = cht#axes |> List.map (Axis.draw-axis range ptmap ctx) |> List.concat in
      inline-graphics (cht#canvas#width) (cht#canvas#height) 0pt
        (fun origin -> [gr-grids; gr-graph; gr-axis] |> List.concat |> List.map (shift-graphics origin))
    in
    FigBox.rawbox ibf

end
