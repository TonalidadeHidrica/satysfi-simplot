% load standard list package
@require: base/list-ext
@require: base/length
@require: pervasives
@require: gr


type arrow-head-size = (|
  % The height of the arrow head
  lenL: length;
  % The distance from the head to intersection of line and the arrow head
  lenM: length;
  % The half width of the arrow head
  lenP: length;
|)


module Arrow : sig
  val default-arrow-head-size: arrow-head-size
  val arrow-head : color -> arrow-head-size -> point -> point -> graphics
end = struct
  let default-arrow-head-size = (|
    lenL = 6pt;
    lenM = 6pt;
    lenP = 3pt;
  |)

  let arrow-head color opts ((x1, y1) as pt1) ((x2, y2) as pt2) =
    % Copy & pasted from gr.satyh (bundled in SATySFi)
    let theta = Geom.atan2-point pt2 pt1 in
    let (cx, cy) = (x2 +' opts#lenL *' (cos theta), y2 +' opts#lenL *' (sin theta)) in
    let (mx, my) = (x2 +' opts#lenM *' (cos theta), y2 +' opts#lenM *' (sin theta)) in
    let phi = theta +. math-pi /. 2. in
    let (p1, q1) = (cx +' opts#lenP *' (cos phi), cy +' opts#lenP *' (sin phi)) in
    let (p2, q2) = (cx -' opts#lenP *' (cos phi), cy -' opts#lenP *' (sin phi)) in
      fill color (Gr.polygon pt2 [(p1, q1); (mx, my); (p2, q2)])
end


% 折れ線グラフなどにおける線の体裁。
module LineGraphStyle : sig

  type style

  % 実線
  val solid  : 'opts ?-> color -> style
    constraint 'opts :: (|
      width : length
    |)

  % 破線
  val dashed : 'opts ?-> color -> style
    constraint 'opts :: (|
      width : length;
      period : length * length;
      phase : length;
    |)

  val arrow-head : arrow-head-size ?-> color -> style

  val circ : 'opts ?-> color -> style
    constraint 'opts :: (|
      % 基準長。ここでは直径のこと。
      scale : length;
    |)

  val circ-custom-colors : length -> color list -> style

  val rect : 'opts ?-> color -> style
    constraint 'opts :: (|
      size : length;
    |)

  val rect-stroke : 'opts ?-> color -> style
    constraint 'opts :: (|
      size : length;
      width: length;
    |)

  val none: style

  val make-graphics: style -> point list -> graphics list

  val make-legend: context -> style -> length -> inline-boxes

end = struct

  type style = point list -> graphics list

  let make-graphics lstyle = lstyle

  let solid ?:opts clr  pts =
    % let opts = opts |> Option.from (| width = 1pt |) in
    let width = match opts with
      | Some(opts) -> opts#width
      | None -> 1pt
    in
    match pts with
    | [] -> []
    | point :: rest-points ->
        let path = rest-points
          |> List.fold-left (fun acc pt -> line-to pt acc)(start-path point)
          |> terminate-path
        in
        [stroke width clr path]

  let arrow-head ?:arrow-head-size clr pts =
    let arrow-head-size = arrow-head-size|> Option.unwrap-or Arrow.default-arrow-head-size in
      List.zip pts (List.tail pts |> Option.unwrap-or [])
        |> List.map (fun (x, y) -> Arrow.arrow-head clr arrow-head-size x y)

  let dashed ?:opts clr  pts =
    let (width, (d1, d2), phase) = match opts with
      | Some(opts) -> (opts#width, opts#period, opts#phase)
      | None -> (1pt, (8pt, 3.6pt), 0pt)
    in

    match pts with
    | [] -> []
    | point :: rest-points ->
        let path = rest-points
          |> List.fold-left (fun acc pt -> line-to pt acc)(start-path point)
          |> terminate-path
        in
        [dashed-stroke width (d1, d2, phase) clr path]

  let none pts = []

  let circ ?:opts clr  pts =
    let scale = match opts with
      | Some(opts) -> opts#scale
      | None -> 2pt
    in

    let rad = scale *' 0.5 in

    let pt2grf pt = [fill clr (Gr.circle pt rad)] in

    pts |> List.map pt2grf |> List.concat

  let circ-custom-colors scale clrs pts =
    let rad = scale *' 0.5 in
    List.zip clrs pts
      |> List.map (fun (clr, pt) -> [Gr.circle pt rad |> fill clr])
      |> List.concat

  let rect ?:opts color points =
    let size = Option.map-or 2pt (fun opts -> opts#size) opts in
    let a = size *' 0.5 in
    let draw (x, y) = 
      [Gr.rectangle (x -' a, y -' a) (x +' a, y +' a) |> fill color]
    in
    points
      |> List.map draw
      |> List.concat

  let rect-stroke ?:opts color points =
    let size = Option.map-or 2pt (fun opts -> opts#size) opts in
    let width = Option.map-or 2pt (fun opts -> opts#width) opts in
    let a = size *' 0.5 in
    let draw (x, y) = 
      [Gr.rectangle (x -' a, y -' a) (x +' a, y +' a) |> stroke width color]
    in
    points
      |> List.map draw
      |> List.concat

  let make-legend ctx style len =
    % let h = get-font-size ctx in
    let h = 10pt in
    let half-h = h *' 0.4 in
      inline-graphics len h 0pt (fun (x, y) ->
        make-graphics style [(0pt, half-h); (len, half-h)]
          |> List.map (shift-graphics (x, y))
      )

end
